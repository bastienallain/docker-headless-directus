---
name: Security Scan

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write

jobs:
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
  docker-image-scan:
    name: Docker Image Security Scan  
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - "directus/directus:latest"
          - "postgres:17.5-alpine"
          - "docker.dragonflydb.io/dragonflydb/dragonfly:latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull Docker image
        run: |
          docker pull ${{ matrix.image }}

      - name: Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image }}
          format: 'sarif'
          output: 'trivy-${{ matrix.image }}.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.image }}.sarif'
        continue-on-error: true
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'directus-docker'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload dependency check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report
          path: reports/
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS (Pull Request)
        if: github.event_name == 'pull_request'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}
          extra_args: --debug --only-verified

      - name: TruffleHog OSS (Full Repo Scan)
        if: github.event_name == 'push' || github.event_name == 'schedule'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified --max-depth 10
  configuration-scan:
    name: Configuration Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for hardcoded secrets
        run: |
          echo "Scanning for hardcoded secrets..."
          # Check for common secret patterns in configuration files
          if find . -name "*.yml" -o -name "*.yaml" -o -name "*.env" | \
             grep -v ".env.example" | \
             xargs grep -E "(password|secret|key|token)\s*[:=]\s*['\"]?[^'\"\$\{]+" 2>/dev/null | \
             grep -v "123\|example\|placeholder\|your_\|\${\|POSTGRES_PASSWORD"; then
            echo "❌ Potential hardcoded secrets found!"
            exit 1
          fi
          echo "✅ No hardcoded secrets detected"

      - name: Validate Docker Compose security
        run: |
          echo "Checking Docker Compose security configurations..."
          # Check for privileged containers
          if find . -name "docker-compose*.yml" -exec grep -l "privileged.*true" {} \; 2>/dev/null; then
            echo "⚠️ Privileged containers found - review security implications"
          fi
          
          # Check for host network mode
          if find . -name "docker-compose*.yml" -exec grep -l "network_mode.*host" {} \; 2>/dev/null; then
            echo "⚠️ Host network mode found - review security implications"
          fi
          
          echo "✅ Docker Compose security checks completed"
  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for FOSSA API Key
        id: fossa-check
        run: |
          if [ -n "${{ secrets.FOSSA_API_KEY }}" ]; then
            echo "fossa_available=true" >> $GITHUB_OUTPUT
          else
            echo "fossa_available=false" >> $GITHUB_OUTPUT
            echo "FOSSA API key not configured - skipping license scan"
          fi

      - name: FOSSA Scan
        if: steps.fossa-check.outputs.fossa_available == 'true'
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
        continue-on-error: true

      - name: Skip FOSSA
        if: steps.fossa-check.outputs.fossa_available == 'false'
        run: |
          echo "✅ License scanning skipped - FOSSA API key not configured"
          echo "To enable license scanning, add FOSSA_API_KEY to repository secrets"

  infrastructure-scan:
    name: Infrastructure as Code Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkov scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true
          soft_fail: true
          framework: dockerfile,secrets,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
